#              Copyright Â© 2023 DuckieCorp. All Rights Reserved.
#
#                       __      Redistribution and use of this code, with or
#                     /` ,\__   without modification, are permitted provided
#                    |    ).-'  that the following conditions are met:
#                   / .--'
#                  / /          0. Redistributions of this code must retain
#    ,      _.==''`  \             the above copyright notice, this list of
#  .'(  _.='         |             conditions and the following disclaimer.
# {   ``  _.='       |          1. The name of the author may not be used to
#  {    \`     ;    /              endorse or promote products derived from
#   `.   `'=..'  .='               this software without specific prior written
#     `=._    .='                  permission.
#  jgs  '-`\\`__                2. Neither the name of the University nor the
#           `-._{                  names of its contributors may be used to
#                                  endorse or promote products derived from
#                                  this software without specific prior written
#                                  permission.

# DO NOT EDIT THIS FILE
#
# If there is something wrong with the appearance of your report,
# the problem lies elsewhere.

from industry_data import IndustryData


class Report:
    """
    Collect statistics across multiple industries.

    Provide a ToString method (__str__) so that everybody's report will be
    formatted identically.  Create an instance of the Report class and print it
    out.
    """
    def __init__(self, year=1999):
        self.year = year
        self.all = IndustryData()
        self.soft = IndustryData()


    def __str__(self):
        """
        This is Python's equivalent to Java's toString method

        Returns a string that displays a nicely formatted report
        """
        return f"""\
<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
<+>                     UNITED STATES OF AMERICA                     <+>
<+>                    BUREAU OF LABOR STATISTICS                    <+>
<+>             Quarterly Census of Employment and Wages             <+>
<+>                 Annual Report For The Year {self.year}                  <+>
<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

Statistics over all industries
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Number of FIPS areas in report       {self.all.num_areas:,}

Total annual wages                   ${self.all.total_annual_wages:,}
Area with maximum annual wages       {self.all.max_annual_wages[0]}
Maximum reported wages               ${self.all.max_annual_wages[1]:,}

Total number of establishments       {self.all.total_estabs:,}
Area with most establishments        {self.all.max_estabs[0]}
Maximum # of establishments          {self.all.max_estabs[1]:,}

Total annual employment level        {self.all.total_emplvl:,}
Area with maximum employment         {self.all.max_emplvl[0]}
Maximum reported employment level    {self.all.max_emplvl[1]:,}


Statistics over the software publishing industry
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Number of FIPS areas in report       {self.soft.num_areas:,}

Total annual wages                   ${self.soft.total_annual_wages:,}
Area with maximum annual wages       {self.soft.max_annual_wages[0]}
Maximum reported wages               ${self.soft.max_annual_wages[1]:,}

Total number of establishments       {self.soft.total_estabs:,}
Area with most establishments        {self.soft.max_estabs[0]}
Maximum # of establishments          {self.soft.max_estabs[1]:,}

Total annual employment level        {self.soft.total_emplvl:,}
Area with maximum employment         {self.soft.max_emplvl[0]}
Maximum reported employment level    {self.soft.max_emplvl[1]:,}"""


    def __repr__(self):
        """
        Idem, but for the REPL and debugger.
        Simply does the same thing as __str__()
        """
        return self.__str__()
